<h3>Instituciones</h3>

@page "/Instituciones"
@page "/Instituciones/{InstitucionId::int}"

@inject IToastService toast

<EditForm Model="instituciones" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Instituciones</h3>
        </div>

        <div class="card-body">
            <form>
                @*Persona Id*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Persona Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="instituciones.InstitucionId" class="form-control" />
                                <div class="input-group-append">
                                    <button type="button" style="z-index:0" class="btn btn-secondary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Nombres*@
                <div class="form-group">
                    <label>Nombres</label>
                    <InputText @bind-Value="instituciones.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => instituciones.Nombre)" />
                </div>

                @*Telefono*@
                <div class="form-group">
                    <label>Teléfono</label>
                    <InputText @bind-Value="instituciones.Email" class="form-control" />
                    <ValidationMessage For="@(() => instituciones.Telefono)" />
                </div>

                @*Cedula*@
                <div class="form-group">
                    <label>Cédula</label>
                    <InputText @bind-Value="instituciones.Telefono" class="form-control" />
                    <ValidationMessage For="(() => instituciones.Telefono)" />
                </div>

                @*Direccion*@
                <div class="form-group">
                    <label>Dirección</label>
                    <InputText @bind-Value="instituciones.Direccion" class="form-control" />
                    <ValidationMessage For="(() => instituciones.Direccion)" />
                </div>

                @*Fecha Nacimiento*@
                <div class="form-group">
                    <label>Fecha Nacimiento</label>
                    <InputDate @bind-Value="instituciones.FechaCreacion" class="form-control" />
                    <ValidationMessage For="(() => instituciones.FechaCreacion)" />
                </div>

            </form>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>

    </div>
</EditForm>

@code {

    [Inject]
    private InstitucionesBLL institucionesBLL { get; set; }

    [Parameter]
    public int InstitucionId { get; set; }

    Institucione instituciones = new Institucione();

    protected override void OnInitialized()
    {
        Nuevo();
    }

    public async void Buscar()
    {
        var registro = await institucionesBLL.Buscar(instituciones.InstitucionId);

        if (registro != null)
        {
            this.instituciones = registro;

        }
        else
        {
            toast.ShowInfo("No se encontró el registro.");
        }
    }

    public void Nuevo()
    {
        Limpiar();
    }

    public async void Guardar()
    {

        if (await institucionesBLL.Guardar(instituciones))
        {

            toast.ShowSuccess("Guardado");
            Limpiar();

        }
        else
        {
            toast.ShowError("No se logró guardar el registro.");

        }
    }

    public async void Eliminar()
    {
        if (await institucionesBLL.Eliminar(instituciones.InstitucionId))
        {
            toast.ShowSuccess("Eliminado");
            Limpiar();
        }
        else
        {
            toast.ShowError("No se logró eliminar el registro.");

        }
    }

    public void Limpiar()
    {
        this.instituciones = new Institucione();
    }

}
}
